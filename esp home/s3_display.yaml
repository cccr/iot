esphome:
  name: s3-screen
  friendly_name: s3_screen
  platformio_options:
    board_build.mcu: esp32s3
    board_build.name: "Espressif ESP32-S3-T-QT"
    board_build.upload.flash_size: "4MB"
    board_build.upload.maximum_size: 4194304
    board_build.vendor: "LilyGO"

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "---"

ota:
  - platform: esphome
    password: "---"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "S3-Screen Fallback Hotspot"
    password: "---"

captive_portal:
    
spi:
  clk_pin: GPIO40
  mosi_pin: GPIO38

font:
  - file: "fonts/OCRAEXT.ttf"
    id: fontocra
    size: 42
  - file: "fonts/OCRAEXT.ttf"
    id: fontocra_12
    size: 12

output:
  - platform: ledc
    pin: GPIO33
    inverted: true
    id: backlightdim

light:
  - platform: monochromatic
    output: backlightdim
    name: "Backlight"

time:
  - platform: homeassistant
    id: home_time
    timezone: America/New_York

display:
  - platform: st7789v
    model: Custom
    width: 128
    height: 128
    offset_width: 1
    offset_height: 2
    cs_pin: GPIO35
    dc_pin: GPIO36
    reset_pin: GPIO34
    update_interval: 1h
    id: disp
    pages:
      - id: page1
        lambda: |-
          it.strftime(0, 0, id(fontocra), TextAlign::TOP_LEFT, "%H:%M", id(home_time).now());
          it.line(0, 50, 127, 50);
          auto black = Color(0, 0, 0);
          auto red = Color(255, 0, 0);
          auto green = Color(0, 255, 0);
          auto blue = Color(0, 0, 255);
          auto white = Color(255, 255, 255);
          it.filled_circle(20, 82, 15, black);
          it.filled_circle(40, 82, 15, red);
          it.filled_circle(60, 82, 15, green);
          it.filled_circle(80, 82, 15, blue);
          it.filled_circle(100, 82, 15, white);
      - id: page2
        lambda: |-
          it.strftime(0, 0, id(fontocra), TextAlign::TOP_LEFT, "1: %H:%M", id(home_time).now());
          it.printf(0, 45, id(fontocra_12), Color::WHITE, "%s", id(mqtt_rx).state.c_str());
      - id: page3
        lambda: |-
          it.strftime(0, 0, id(fontocra), TextAlign::TOP_LEFT, "2: %H:%M", id(home_time).now());
          it.printf(0, 20, id(fontocra_12), Color::WHITE, "%s", id(mqtt_rx).state.c_str());

globals:
  - id: current_page
    type: std::string
    restore_value: no

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO48
      mode:
        input: true
        pullup: true
    name: "right"
    on_click:
      then:
        - display.page.show_next: disp
        - component.update: disp
  - platform: gpio
    pin:
      number: GPIO47
      mode:
        input: true
        pullup: true
    name: "center"
    on_click:
      then:
        - component.update: disp
  - platform: gpio
    pin:
      number: GPIO00
      mode:
        input: true
        pullup: true
    name: "left"
    on_click:
      then:
      - display.page.show_previous: disp
      - component.update: disp

mqtt:
  broker: 127.0.0.1
  id: mqtt_client
  on_message:
      - topic: s3_screen/rx
        then:
          - lambda: |-
              // Store the current page ID
              std::map<const esphome::display::DisplayPage*, std::string> map {
              { id(page1), "page1" },
              { id(page2), "page2" },
              { id(page3), "page3" },
              };
              // If we're on page1, this will return the string "page1":
              // Store the current page id
              id(current_page) = map[id(disp).get_active_page()];
              // Switch to a specific page (page2 in this case)
              id(disp).show_page(id(page2));
          - lambda: |-
              id(mqtt_rx).publish_state(x.c_str());  // Update the text sensor manually
          - component.update: disp
          - delay: 5s
          - lambda: |-
              std::map<std::string, esphome::display::DisplayPage*> map {
              { "page1", id(page1) },
              { "page2", id(page3) },
              { "page2", id(page3) },
              };
              // Switch back to the stored page
              id(disp).show_page(map[id(current_page)]);
          - component.update: disp

text_sensor:
  - platform: mqtt_subscribe
    name: "Data from topic"
    id: mqtt_rx
    topic: s3_screen/rx

substitutions:
  devicename: s3_screen
  upper_devicename: S3 Screen 

sensor:
#  - platform: wifi_signal
#    name: ${upper_devicename} WiFi Signal
#    id: wifi_dbm
  - platform: uptime
    id: uptime_id
    name: ${upper_devicename} Uptime
